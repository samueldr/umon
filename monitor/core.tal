( ---------------------------------------------- )
( Monitor program - Core monitor implementation  )
( ---------------------------------------------- )
( NOTE: all labels and macros **HAVE** to start  )
(       with `monitor:`.                         )
( ---------------------------------------------- )
( This file implements the monitor.              )
( ---------------------------------------------- )

( start of the memory area for the monitor proper )
@monitor:core

( Scratch area reserved for runtime manipulations )
@monitor:variables
	( Used by the monitor )
	&current    0000 ( Current address )
	&value_hi     00 ( Unused, but allows using a single short parser )
	&value        00 ( Value for command )
	( Used by the parser )
	&cmd          00 ( Current command )
	&parser_state 00 ( Bit field for the parser state )

( Starts the monitor program, replacing the console vector. )
@monitor:start
	STH2r DUP2 ;monitor:stop/PC STA2 ( Store the current PC, to jump back to it when done. )
	LIT "@ monitor:putc
	monitor:print-short
	monitor:reset-state
	monitor:prompt
	monitor:bios:hook_console

( Stops the monitor program, putting back the console vector. )
@monitor:stop
	monitor:bios:unhook_console
	( Fish back PC from when we started, and jump back )
	[ LIT2r &PC 0000 ] JMP2r

@monitor:reset-state
	( Sets back the parser to the commands parser )
	;monitor:parser:commands ;monitor:on-console/current-parser STA2
	( Sets back command to none )
	.monitor:Command/none ;monitor:variables/cmd STA
	( Sets back value argument 0 )
	#0000 ;monitor:variables/value_hi STA2
	( Sets back state to none )
	#00 ;monitor:variables/parser_state STA
	JMP2r

( Prints the prompt for the monitor )
@monitor:prompt
	monitor:print-nl
	LIT "$ monitor:putc
	;monitor:variables/current LDA2
	monitor:print-short
	;/ps1 puts
	JMP2r
	&ps1 "> 20 00

( Handles monitor input )
@monitor:on-console ( -- )
	monitor:bios:on-console-start
	monitor:getc

	( Handling in-flight commands )
	DUP LIT 0a NEQ ?{ monitor:command:flush monitor:prompt POP !/done }
	DUP LIT 20 NEQ ?{ monitor:command:flush                POP !/done }
	
	( Go to the current parser from LUT )
	LIT2 &current-parser 0000
	JSR2

	&done
	monitor:bios:on-console-end

~monitor/helpers.tal
~monitor/commands.tal
~monitor/parser.tal

@monitor:core:end


( Keep tabs of where we are )
@monitor:_end

( Import the enums )
~monitor/enums.tal

( Reset the output address )
|monitor:_end
