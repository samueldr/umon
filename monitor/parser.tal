( ---------------------------------------------- )
( Monitor program - Monitor command parser       )
( ---------------------------------------------- )
( NOTE: all labels and macros **HAVE** to start  )
(       with `monitor:`.                         )
( ---------------------------------------------- )
( This file implements the parser.               )
( ---------------------------------------------- )

( Parse the commands )
@monitor:parser:commands ( char -- )
	(      char       parser                   command                         )
	DUP LIT "q NEQ ?{ ;monitor:parser:commands .monitor:Command/quit    !/done }
	DUP LIT "% NEQ ?{ ;monitor:parser:commands .monitor:Command/debug   !/done }
	DUP LIT "s NEQ ?{ ;monitor:parser:address  .monitor:Command/show    !/done }
	DUP LIT "w NEQ ?{ ;monitor:parser:address  .monitor:Command/write   !/done }
	DUP LIT "g NEQ ?{ ;monitor:parser:address  .monitor:Command/go      !/done }
	DUP LIT "+ NEQ ?{ ;monitor:parser:stack    .monitor:Command/push    !/done }
	DUP LIT "- NEQ ?{ ;monitor:parser:stack    .monitor:Command/pop     !/done }

	( On unknown command )
	monitor:parser:_unknown
	JMP2r

	&done
	( From the previous "table", store the new monitor state )
	;monitor:variables/cmd STA               ( Set the current command )
	;monitor:on-console/current-parser STA2  ( Set the current parser )
	POP   ( Drop the current char )
	JMP2r

( Selects the stack to operate on from the char )
@monitor:parser:stack ( char -- )
	DUP LIT "W NEQ ?{ .monitor:ParserState/stack_wst !/done }
	DUP LIT "R NEQ ?{ .monitor:ParserState/stack_rst !/done }
	( else ) [
		monitor:parser:_unknown
		JMP2r
	]

	&done
	( -- parser* stack_bit )
	( Configure the stack to operate on )
	monitor:parser:_set-state

	;monitor:parser:none
	;monitor:variables/cmd LDA
	.monitor:Command/push NEQ ?{
		POP2
		;monitor:parser:value
	}
	( And the parser to continue using )
	[ ;monitor:on-console/current-parser STA2 ]

	POP
	JMP2r

( Pseudo-parser eating-up chars in a confused manner )
@monitor:parser:none     ( char -- )
@monitor:parser:_unknown ( char -- )
	LIT "? monitor:bios:putc ( char -- )
	monitor:bios:putc        ( -- )
	monitor:print-nl
	JMP2r

( Builds up the address argument until flush or `:` )
@monitor:parser:address ( char -- )
	DUP LIT ": EQU ?{ ( Except if there's no address to parse... )
		( Reset the current address )
		#0000 ;monitor:variables/current STA2
	}
	( Configure the parser components )
	[ ;monitor:parser:_address   ;monitor:on-console/current-parser STA2 ]
	[ ;monitor:variables/current ;monitor:parser:_nibble/target     STA2 ]
	( fall-through )
@monitor:parser:_address ( char -- )
	( Switch to value parser )
	DUP LIT ": NEQ ?{
		POP ;monitor:parser:value ;monitor:on-console/current-parser STA2 JMP2r
	}

	( The address has been modified )
	.monitor:ParserState/address_set monitor:parser:_set-state

	( Parse and save the nibble )
	monitor:parser:_nibble
	JMP2r

@monitor:parser:value ( char -- )
	( Reset the current value )
	#0000 ;monitor:variables/value_hi STA2
	( Configure the parser components )
	[ ;monitor:parser:_value      ;monitor:on-console/current-parser STA2 ]
	[ ;monitor:variables/value_hi ;monitor:parser:_nibble/target     STA2 ]
	( fall-through )
@monitor:parser:_value ( char -- )
	( The value has been modified )
	.monitor:ParserState/value_set monitor:parser:_set-state

	( Parse and save the nibble )
	monitor:parser:_nibble
	JMP2r

@monitor:parser:_nibble ( char -- )
	( Parse char as a hex nibble )
	monitor:hex2nibble  ( char -- nibl )

	( Not an hex nibble? consume and return! )
	DUP #10 LTH ?{ POP JMP2r }

	( Load the current target value )
	[ LIT2 &target 0000 ] LDA2 ( nibl -- nibl cur* )
	[
		( This relies on the fact we have pushed the previous low nibble )
		( to the left, setting the low nibble to zero. )
		( cur << 4 )
		#40 SFT2
		ROT                    ( nibl cur_hi cur_lo -- cur_hi cur_lo nibl )
		ADD                    ( -- cur_hi cur_lo+nibl )
	]
	[ ;/target LDA2 ]          ( cur -- cur &target )
	STA2                       ( cur &target -- )
	JMP2r

@monitor:parser:_set-state ( bit_field -- )
	;monitor:variables/parser_state LDA   ( -- bit_field curr )
	ORA                                   ( -- new_value )
	;monitor:variables/parser_state STA   ( -- )
	JMP2r
